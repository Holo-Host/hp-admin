type Me {
  id: ID
  name: String
  avatarUrl: String
  isRegistered: Boolean
}

type HappStoreUser {
  hash: String
  name: String
}

type HhaUser {
  id: ID
  isRegistered: Boolean
}

type Happ {
  id: ID
  title: String
  description: String
  thumbnailUrl: String
  homepageUrl: String
  dnaHash: String
  ui: String
  happStoreId: String
  isEnabled: Boolean
}

type HostPricing {
  units: String
  pricePerUnit: String
}

type MyHolofuelUser {
  id: ID
  nickname: String
  avatarUrl: String
}

type HolofuelUser {
  # NB: HolofuelUser is cached by agentAddress and nickname. - We are intentionally not caching only by id for the transaction counterparty
  # in order to maintain what the nickname of the counterparty was at the time the transaction was initiated.
  agentAddress: String
  nickname: String
  avatarUrl: String
}

enum TransactionType {
  offer
  request
}

enum TransactionStatus {
  pending
  completed
  rejected
  canceled
  declined
}

enum TransactionDirection {
  incoming # indicates the recipient of funds
  outgoing # indicates the spender of funds
}

type Transaction {
  id: ID # ID will be the origin commit hash
  amount: Float
  counterparty: HolofuelUser
  direction: TransactionDirection
  status: TransactionStatus
  type: TransactionType
  timestamp: String
  fees: Float
  presentBalance: Float
  notes: String
  happName: String
  canceledBy: HolofuelUser
  isPayingARequest: Boolean
  inProcess: Boolean
  isActioned: Boolean
  isStale: Boolean
}

type Ledger {
  balance: Float
  credit: Float
  payable: Float
  receivable: Float
  fees: Float
}

type HposSettings {
  hostPubKey: String
  hostName: String
  registrationEmail: String
  networkStatus: String # ie: 'live'
  sshAccess: Boolean
  deviceName: String
}

type HposVersion {
  availableVersion: String
  currentVersion: String
}

type HposPorts {
  primaryPort: String
}

type HposStatus {
  versionInfo: HposVersion
  networkId: String # ZT publicIdentity
  ports: HposPorts
}

type HposAuth {
  isAuthed: Boolean
  hposSettings: HposSettings
}

input HolofuelUserInput {
  agentAddress: ID
  nickname: String
}

input TransactionInput {
  id: ID # ID will be the origin commit hash
  amount: Float
  counterparty: HolofuelUserInput
  direction: TransactionDirection
  status: TransactionStatus
  type: TransactionType
  timestamp: String
  fees: Float
  notes: String
}

type HostingReport {
  localSourceChains: Int
  zomeCalls: Int
  hostedHapps: [HostedHapp]
}

type HostedHapp {
  name: String
}

type EarningsReport {
  totalEarnings: Float
  cpu: Float
  bandwidth: Float
  storage: Float
}

type Query {
  me: Me
  happStoreUser: HappStoreUser
  hostingUser: HhaUser
  happs: [Happ]
  happ(id: String!): Happ
  hostPricing: HostPricing
  holofuelCompletedTransactions: [Transaction]
  holofuelNewCompletedTransactions(since: String!): [Transaction]
  holofuelWaitingTransactions: [Transaction]
  holofuelNonPendingTransactions: [Transaction]
  holofuelActionableTransactions: [Transaction]
  holofuelEarningsTransactions: [Transaction]
  holofuelLedger: Ledger
  holofuelUser: MyHolofuelUser
  holofuelRecentCounterparties: [HolofuelUser]
  hposSettings: HposSettings
  hostingReport: HostingReport
  earningsReport: EarningsReport
  hposStatus: HposStatus
}

type Mutation {
  registerUser(name: String, avatarUrl: String): Me
  registerHostingUser: HhaUser
  enableHapp(appId: String): Happ
  disableHapp(appId: String): Happ
  updateHostPricing(units: String, pricePerUnit: String): HostPricing
  holofuelUpdateUser(nickname: String!, avatarUrl: String): MyHolofuelUser
  holofuelRequest(counterpartyId: String, amount: Float, notes: String): Transaction
  holofuelOffer(counterpartyId: String, amount: Float,  notes: String, requestId:ID): Transaction
  holofuelAcceptOffer(transactionId: ID): Transaction
  holofuelDecline(transactionId: ID): Transaction
  holofuelCancel(transactionId: ID): Transaction
  holofuelRecoverFunds(transactionId: ID): Transaction
  holofuelRefundTransactions(transactions: [TransactionInput]): [Transaction]
  hposUpdateSettings(hostPubKey: String, hostName: String, deviceName: String, sshAccess: Boolean): HposSettings
  hposUpdateVersion: HposStatus
  hposCheckAuth: HposAuth
}
